METADATA {
    id: Book-E
    name: Connections Book ðŸ“š
    title: Cartesian Products & Joins
    author: Queen Jadis of Charn
    color: links
}


PAGE {
    An SQL query can target several tables, in which case the results are based on all possible row combinations.

    Often, the rows in the target tables are joined together using a suitable condition.
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name|owner_id
            1|Wilfried|1
            2|Justus|2
            3|Tabaluca|1
        }
        TABLE {
            Owners
            id|name
            1|Anna
            2|Bingo
            3|Coco
        }
        QUERY {
            SELECT D.name, O.name FROM Dragons D, Owners O WHERE D.owner_id=O.id;
        }
    }
}


PAGE {
    In a multi-table query, the WHERE section may contain both join-related conditions and other selection conditions.
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name|owner_id
            1|Wilfried|1
            2|Justus|2
            3|Tabaluca|1
        }
        TABLE {
            Owners
            id|name
            1|Anna
            2|Bingo
            3|Coco
        }
        QUERY {
            SELECT D.name, O.name FROM Dragons D, Owners O WHERE D.owner_id=O.id AND O.name='Bingo';
        }
    }
}


PAGE {
    The same table can appear multiple times in a query if the columns in the table have various roles.

    In the following example, the table Friends tells you which dragons are friends with each other.
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name
            1|Wilfried
            2|Justus
            3|Tabaluca
        }
        TABLE {
            Friends
            dragon_id|friend_id
            1|2
            1|3
            2|1
        }
        QUERY {
            SELECT A.name, B.name FROM Dragons A, Dragons B, Friends F WHERE A.id=F.dragon_id AND B.id=F.friend_id;
        }
    }
}

PAGE {
    Join operators are an alternative way of expressing Cartesian products.

    An SQL query can target multiple tables, in which case the results are based on all row combinations.

    To make the results meaningful, the tables are joined together using a suitable join operator and condition.
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name|owner_id
            1|Wilfried|1
            2|Justus|2
            3|Tabaluca|1
        }
        TABLE {
            Owners
            id|name
            1|Anna
            2|Bingo
            3|Coco
        }
        QUERY {
            SELECT D.name, O.name FROM Dragons D INNER JOIN Owners O on D.owner_id=O.id;
        }
    }
}


PAGE {
    In a joined-table query, the ON (or USING(field_name) for equally named fields) condition takes care of combining the records.
    
    The WHERE section may contain the conditions that limit the results.
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name|owner_id
            1|Wilfried|1
            2|Justus|2
            3|Tabaluca|1
        }
        TABLE {
            Owners
            id|name
            1|Anna
            2|Bingo
            3|Coco
        }
        QUERY {
            SELECT D.name, O.name FROM Dragons D INNER JOIN Owners O ON D.owner_id=O.id WHERE O.name='Bingo';
        }
    }
}


PAGE {
    The same table can appear multiple times in a query if the rows in the table have multiple different roles.

    In the following example, the board Friends tells you which dragons are friends with each other.
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name
            1|Wilfried
            2|Justus
            3|Tabaluca
        }
        TABLE {
            Friends
            dragon_id|friend_id
            1|2
            1|3
            2|1
        }
        QUERY {
            SELECT A.name, B.name FROM Dragons A INNER JOIN Dragons B ON A.id=F.dragon_id INNER JOIN Friends F ON B.id=F.friend_id;
        }
    }
}


PAGE {
    There are three main types of joins:

    - CROSS JOIN (Cartesian join)

    - INNER JOIN (default)

    - OUTER JOIN (Though SQL standard defines three types of OUTER JOINs: LEFT, RIGHT, and FULL, SQLite used in this game only supports the LEFT OUTER JOIN.)
}

PAGE {
    In the next pages of this book you will find examples of each of the join operators.
}


PAGE {

    CROSS JOIN (Cartesian product) matches every row of the first table with every row of the second table. 
    
    If the input tables have x and y rows, the resulting table will have x*y rows. 
    
    Because CROSS JOINs may generate extremely large tables, care must be taken to only use them when appropriate.

}

PAGE {
    EXAMPLE {
        TABLE {
            Ingredients
            id|name
            1|Rat tail
            2|Mushrooms
        }
        TABLE {
            Spices
            id|name
            1|Sea Salt
            3|Herbs
        }
        QUERY {
            SELECT A.name, B.name FROM Ingredients A CROSS JOIN Spices B;
        }
    }
}


PAGE {

    INNER JOIN creates a result table by combining column values of two tables (table1 and table2) based upon the join-predicate expressed using an ON, USING, or NATURAL keyword.
    
    The query compares each row of table1 with each row of table2 to find all pairs of rows which satisfy the join-predicate. 
    
    When the join-predicate is satisfied, the column values for each matched pair of rows of A and B are combined into a result row. INNER JOIN is the default type of join (INNER keyword is optional).
}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name
            1|Wilfried
            2|Justus
            3|Tabaluca
        }
        TABLE {
            Toys
            id|name|dragon_id
            1|Ball|2
            2|Spike|3
            2|Fire|1
        }
        QUERY {
            SELECT A.name, B.name FROM Dragons A JOIN Toys B ON A.id=B.dragon_id;
        }
    }
}


PAGE {

    OUTER JOIN has a condition that is identical to INNER JOINs. 
    
    The initial results table is calculated the same way. 
    
    Once the primary JOIN is calculated, an OUTER JOIN will take any unjoined rows from one or both tables, pad them out with NULLs, and append them to the resulting table.

}

PAGE {
    EXAMPLE {
        TABLE {
            Dragons
            id|name|wings
            1|Will|true
            2|Jusy|false
            3|Tabo|true
        }
        TABLE {
            WingColor
            dragon_id|color
            1|blue
            3|green
        }
        QUERY {
            SELECT A.name, B.color FROM Dragons A LEFT OUTER JOIN WingColor B ON A.id=B.dragon_id
        }
    }
}