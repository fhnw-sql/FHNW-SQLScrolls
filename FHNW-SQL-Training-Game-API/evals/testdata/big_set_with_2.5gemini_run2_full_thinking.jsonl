{"item":{"input":"create view PotionView as select p.name, p.level, l.danger from Potions p, Levels l where p.level=l.level;","answer":"create view PotionView as select p.name, p.level, l.danger from Potions p, Levels l where ROUND(p.level)=l.level;","gemini_output":"{\"hint\":\"where ROUND(p.level)\"}\n{\"explanation\":\"Consider using a function to adjust the precision of `p.level` for comparison.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zne.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter;","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter;","gemini_output":"{\"hint\":\"ON (north_zone.\"}\n{\"explanation\":\"Ensure your alias `north_zone` is spelled correctly in the JOIN condition.\"}"}}
{"item":{"input":"SELECT p1.firstname, p1.lastname, p1.subject subject_1, p1.persontype persontype_1, p2.subject subject_2, p2.persontype persontype_2 FROM person p1 INNER JOIN person p2 ON (p1.firstname = p2.firstname AND p1.lastname = p2.lastname AND p1.personid < p2.);","answer":"SELECT p1.firstname, p1.lastname, p1.subject subject_1, p1.persontype persontype_1, p2.subject subject_2, p2.persontype persontype_2 FROM person p1 INNER JOIN person p2 ON (p1.firstname = p2.firstname AND p1.lastname = p2.lastname AND p1.personid < p2.personid);","gemini_output":"{\"hint\":\"personid);\"}\n{\"explanation\":\"You need to specify a column for comparison after `p2.`. You cannot compare a column to a table alias.\"}"}}
{"item":{"input":"SELECT p.name, SUM(amount), CONCAT(symbol) FROM Potions p JOIN Recipes r USING (potion_id) JOIN Ingredients i USING(ingredient_id) GROUP BY potion_id playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","answer":"SELECT p.name, SUM(amount), GROUP_CONCAT(symbol) FROM Potions p JOIN Recipes r USING (potion_id) JOIN Ingredients i USING(ingredient_id) GROUP BY potion_id playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","gemini_output":"{\"hint\":\"SUM(amount), GROUP_CONCAT(symb\"}\n{\"explanation\":\"Use GROUP_CONCAT to concatenate strings from multiple rows within each group. CONCAT combines strings from the same row.\"}"}}
{"item":{"input":"SELECT i.instrument_name, pe.fname, pe.city FROM person pe INNER JOIN playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","answer":"SELECT i.instrument_name, pe.fname, pe.name FROM person pe INNER JOIN playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","gemini_output":"{\"hint\":\"pe.fname, pe.name FROM\"}\n{\"explanation\":\"Check the SELECT clause. You need to select the person's name, not their city, from the person table.\"}"}}
{"item":{"input":"SELECT p.personid, p.firstname, p.lastname, strftime('%Y-%m-%d %H:%M', t.entrytime) AS entrytime, strftime('%Y-%m-%d %H:%M', t.exittime) AS exittime, (strftime('%s', t.exittime) - strftime('%s', t.entrytime)) / 60 AS duration_minutes FROM person p INNER JOIN timetracking t ON t.personID = p.personID INNER JOIN area a ON a.personID = t.personID WHERE a.areaname = 'Mechanical Lab' ORDER BY duration_minutes DESC;","answer":"SELECT p.personid, p.firstname, p.lastname, strftime('%Y-%m-%d %H:%M', t.entrytime) AS entrytime, strftime('%Y-%m-%d %H:%M', t.exittime) AS exittime, (strftime('%s', t.exittime) - strftime('%s', t.entrytime)) / 60 AS duration_minutes FROM person p INNER JOIN timetracking t ON t.personID = p.personID INNER JOIN area a ON a.areaID = t.areaID WHERE a.areaname = 'Mechanical Lab' ORDER BY duration_minutes DESC;","gemini_output":"{\"hint\":\"ON a.areaID\"}\n{\"explanation\":\"Ensure your join condition correctly links `area` and `timetracking` tables using their respective `areaID` columns.\"}"}}
{"item":{"input":"SELECT p.personID, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Mechanical Lab' UNION SELECT p.personid, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Research' AND t.entrytime <= '2023-03-30 17:30' AND t.exittime >= '2023-03-30 17:00';","answer":"SELECT p.personID, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Mechanical Lab' INTERSECT SELECT p.personid, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Research' AND t.entrytime <= '2023-03-30 17:30' AND t.exittime >= '2023-03-30 17:00';","gemini_output":"{\"hint\":\"Mechanical Lab' INTERSECT SELECT\"}\n{\"explanation\":\"Consider INTERSECT to find common rows between two queries, instead of combining all unique rows with UNION.\"}"}}
{"item":{"input":"SELECT distinct leisure.activities as activity FROM leisure, json_tree(leisure.activities) WHERE type='text' ORDER BY leisure.activities FROM user","answer":"SELECT distinct atom as activity FROM leisure, json_tree(leisure.activities) WHERE type='text' ORDER BY atom FROM user","gemini_output":"{\"hint\":\"SELECT distinct atom as activity\"}\n{\"explanation\":\"The `atom` column, created by `json_tree`, holds the individual activity names.\"}"}}
{"item":{"input":"SELECT name, json_extract(interests, '$.likes[-1]') FROM user","answer":"SELECT name, json_extract(interests, '$.likes[#-1]') FROM user","gemini_output":"{\"hint\":\"$.likes[#-1]\"}\n{\"explanation\":\"The # symbol is used with -1 to correctly reference the last element in a JSON array.\"}"}}
{"item":{"input":"SELECT season, json_object('sport', 'food', 'art') FROM leisure","answer":"SELECT season, json_object('sport', sport, 'food', food, 'art', art) FROM leisure","gemini_output":"{\"hint\":\"sport, 'food',\"}\n{\"explanation\":\"`json_object` requires key-value pairs; you need a value for each key.\"}"}}
{"item":{"input":"SELECT * FROM zoo_animal","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"SELECT north_zone.sq\"}\n{\"explanation\":\"Your SELECT statement needs specific calculations from joined tables, not all columns.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\", sum(square\"}\n{\"explanation\":\"You need to add a comma and the sum function to your subquery's SELECT list.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"squaremeter FROM zoo_cage\"}\n{\"explanation\":\"Remember to specify the source table for your subquery using the FROM clause.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"zone = 'north'\"}\n{\"explanation\":\"Your WHERE clause needs a condition. Specify which 'zone' you are interested in.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"GROUP BY zone) north_zo\"}\n{\"explanation\":\"Remember to complete your subquery's GROUP BY clause and assign an alias to your derived table.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"...north_zone INNER JOIN zoo_cage c...\"}\n{\"explanation\":\"You've started an INNER JOIN. Remember to specify the table and its alias you're joining with.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"INNER JOIN zoo_cage c ON (north_zone.zone\"}\n{\"explanation\":\"Remember to specify the join condition for your INNER JOIN clause.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"INNER JOIN zoo_animal\"}\n{\"explanation\":\"You're missing a JOIN clause to connect to the `zoo_animal` table for animal data.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"(c.id = a.cage\"}\n{\"explanation\":\"You need to specify the join condition for `zoo_animal` by comparing `cage_id` with `id`.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"GROUP BY c.zone, north\"}\n{\"explanation\":\"Your GROUP BY clause is incomplete. It should include all non-aggregated columns used in your SELECT statement.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT name from ghosts where year > 1800","gemini_output":"{\"hint\":\"SELECT name from gho\"}\n{\"explanation\":\"Specify the column(s) you want to retrieve and the table they come from.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT * FROM Ghosts WHERE YEAR BETWEEN 1600 AND 1700 ORDER BY YEAR DESC, NAME ASC","gemini_output":"{\"hint\":\"* FROM Ghosts\"}\n{\"explanation\":\"To see all columns, use * and specify the table name with FROM.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT COUNT(DISTINCT YEAR) FROM GHOSTS","gemini_output":"{\"hint\":\"SELECT COUNT(DISTINC\"}\n{\"explanation\":\"After SELECT, use a function like COUNT() to aggregate. Consider using DISTINCT for unique values.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT name from ghosts order by name ASC","gemini_output":"{\"hint\":\"SELECT name from \"}{\"explanation\":\"Specify the columns you want to retrieve and the table they come from using `FROM`.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT SUM(MURDERED) FROM GHOSTS WHERE NAME = 'Siegfried'","gemini_output":"{\"hint\":\"SELECT SUM(MURDERED)\"}\n{\"explanation\":\"After SELECT, specify what you want to retrieve, like an aggregate function such as SUM().\"}"}}
{"item":{"input":"SELECT year FROM GHOSTS WHERE name IS \"Sieglinde\"","answer":"SELECT year from ghosts where name =\"Sieglinde\"","gemini_output":"{\"hint\":\"name =\\\"Sieglinde\\\"\"}\n{\"explanation\":\"For equality comparison, use `=` instead of `IS`. `IS` is primarily for `NULL` checks.\"}"}}
{"item":{"input":"SELECT a.title, count(*), sum(s.seconds) FROM song s LEFT JOIN album a ON a.album_id = s.album_fk GROUP BY s.title","answer":"SELECT a.title, count(*), sum(s.seconds) FROM song s INNER JOIN album a ON a.album_id = s.album_fk GROUP BY a.title","gemini_output":"{\"hint\":\"FROM song s INNER JOIN album\"}\n{\"explanation\":\"Consider using INNER JOIN instead of LEFT JOIN. INNER JOIN returns only matching rows from both tables.\"}"}}
{"item":{"input":"SELECT COUNT(type1) FROM Pokemon;","answer":"SELECT COUNT(*) FROM Pokedex_new;","gemini_output":"{\"hint\":\"SELECT COUNT(* FROM Pokedex_\"}\n{\"explanation\":\"Use COUNT(*) to count all rows. Check the target table name in the FROM clause.\"}"}}
{"item":{"input":"SELECT a.name, a.type FROM zoo_employee k JOIN zoo_animal a ON c.cage_id JOIN zoo_food f ON  f.id = a.food_id WHERE a.name='blueberry' AND k.firstname = 'Heidi' ","answer":"SELECT a.name, a.type FROM zoo_employee k JOIN zoo_animal a ON k.cage_id = a.cage_id JOIN zoo_food f ON f.id = a.food_id WHERE f.name='blueberry' AND k.firstname = 'Heidi';","gemini_output":"{\"hint\":\"ON k.cage_id = a.cag\"}\n{\"explanation\":\"Your first ON clause is incomplete. Remember to specify the join condition for both tables.\"}"}}
{"item":{"input":"SELECT p.personid, p.firstname, p.lastname FROM person p INNER JOIN person ar ON (p.personid = ar.personid_fk) INNER JOIN area a ON (ar.areaid_fk = a.areaid) WHERE a.areaname = 'Mechanical Lab' ORDER BY lastname, firstname;","answer":"SELECT p.personid, p.firstname, p.lastname FROM person p INNER JOIN accessright ar ON (p.personid = ar.personid_fk) INNER JOIN area a ON (ar.areaid_fk = a.areaid) WHERE a.areaname = 'Mechanical Lab' ORDER BY lastname, firstname;","gemini_output":"{\"hint\":\"INNER JOIN accessright ar\"}\n{\"explanation\":\"The alias `ar` should refer to the `accessright` table, not the `person` table, for the join to work correctly.\"}"}}
