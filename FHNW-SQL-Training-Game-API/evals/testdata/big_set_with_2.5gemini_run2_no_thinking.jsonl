{"item":{"input":"create view PotionView as select p.name, p.level, l.danger from Potions p, Levels l where p.level=l.level;","answer":"create view PotionView as select p.name, p.level, l.danger from Potions p, Levels l where ROUND(p.level)=l.level;","gemini_output":"{\"hint\":\"ROUND(p.level)\"}\n{\"explanation\":\"Consider rounding the potion level to match the level in the 'Levels' table.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zne.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter;","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter;","gemini_output":"{\"hint\":\"...c ON (north_zone.zone = c.zone)...\"}\n{\"explanation\":\"Double-check your column names for typos in your JOIN conditions.\"}"}}
{"item":{"input":"SELECT p1.firstname, p1.lastname, p1.subject subject_1, p1.persontype persontype_1, p2.subject subject_2, p2.persontype persontype_2 FROM person p1 INNER JOIN person p2 ON (p1.firstname = p2.firstname AND p1.lastname = p2.lastname AND p1.personid < p2.);","answer":"SELECT p1.firstname, p1.lastname, p1.subject subject_1, p1.persontype persontype_1, p2.subject subject_2, p2.persontype persontype_2 FROM person p1 INNER JOIN person p2 ON (p1.firstname = p2.firstname AND p1.lastname = p2.lastname AND p1.personid < p2.personid);","gemini_output":"{\"hint\":\"p1.personid < p2.personid);\"}\n{\"explanation\":\"Make sure to compare `personid` from both tables in your `ON` clause.\"}"}}
{"item":{"input":"SELECT p.name, SUM(amount), CONCAT(symbol) FROM Potions p JOIN Recipes r USING (potion_id) JOIN Ingredients i USING(ingredient_id) GROUP BY potion_id playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","answer":"SELECT p.name, SUM(amount), GROUP_CONCAT(symbol) FROM Potions p JOIN Recipes r USING (potion_id) JOIN Ingredients i USING(ingredient_id) GROUP BY potion_id playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","gemini_output":"{\"hint\":\"... GROUP_CONCAT(symbol) ...\"}\n{\"explanation\":\"GROUP_CONCAT aggregates strings from multiple rows into a single string.\"}"}}
{"item":{"input":"SELECT i.instrument_name, pe.fname, pe.city FROM person pe INNER JOIN playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","answer":"SELECT i.instrument_name, pe.fname, pe.name FROM person pe INNER JOIN playing pl ON (pe.person_id = pl.person_id) INNER JOIN instrument i ON (pl.instrument_id = i.instrument_id) ORDER BY i.instrument_name, pe.fname;","gemini_output":"{\"hint\":\"SELECT i.instrument_name, pe.fname, pe.name\"}\n{\"explanation\":\"Double-check the columns you are selecting from the 'person' table.\"}"}}
{"item":{"input":"SELECT p.personid, p.firstname, p.lastname, strftime('%Y-%m-%d %H:%M', t.entrytime) AS entrytime, strftime('%Y-%m-%d %H:%M', t.exittime) AS exittime, (strftime('%s', t.exittime) - strftime('%s', t.entrytime)) / 60 AS duration_minutes FROM person p INNER JOIN timetracking t ON t.personID = p.personID INNER JOIN area a ON a.personID = t.personID WHERE a.areaname = 'Mechanical Lab' ORDER BY duration_minutes DESC;","answer":"SELECT p.personid, p.firstname, p.lastname, strftime('%Y-%m-%d %H:%M', t.entrytime) AS entrytime, strftime('%Y-%m-%d %H:%M', t.exittime) AS exittime, (strftime('%s', t.exittime) - strftime('%s', t.entrytime)) / 60 AS duration_minutes FROM person p INNER JOIN timetracking t ON t.personID = p.personID INNER JOIN area a ON a.areaID = t.areaID WHERE a.areaname = 'Mechanical Lab' ORDER BY duration_minutes DESC;","gemini_output":"{\"hint\":\"...a ON a.areaID = t.areaID WHERE...\"}\n{\"explanation\":\"Check the JOIN condition for the 'area' table. It should connect 'areaID' columns.\"}"}}
{"item":{"input":"SELECT p.personID, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Mechanical Lab' UNION SELECT p.personid, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Research' AND t.entrytime <= '2023-03-30 17:30' AND t.exittime >= '2023-03-30 17:00';","answer":"SELECT p.personID, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Mechanical Lab' INTERSECT SELECT p.personid, p.firstname, p.lastname, p.subject, p.persontype FROM person p INNER JOIN timetracking t ON (t.PersonID = p.PersonID) INNER JOIN area a ON (a.areaID = t.areaid) WHERE a.areaname = 'Research' AND t.entrytime <= '2023-03-30 17:30' AND t.exittime >= '2023-03-30 17:00';","gemini_output":"{\"hint\":\"... 'Mechanical Lab' INTERSECT ...\"}\n{\"explanation\":\"Consider using INTERSECT instead of UNION to find common results between queries.\"}"}}
{"item":{"input":"SELECT distinct leisure.activities as activity FROM leisure, json_tree(leisure.activities) WHERE type='text' ORDER BY leisure.activities FROM user","answer":"SELECT distinct atom as activity FROM leisure, json_tree(leisure.activities) WHERE type='text' ORDER BY atom FROM user","gemini_output":"{\"hint\":\"SELECT distinct atom as activity\"}\n{\"explanation\":\"Consider selecting the 'atom' from the parsed JSON, not the original 'activities' column.\"}"}}
{"item":{"input":"SELECT name, json_extract(interests, '$.likes[-1]') FROM user","answer":"SELECT name, json_extract(interests, '$.likes[#-1]') FROM user","gemini_output":"{\"hint\":\"json_extract(interests, '$.likes[#-1]')\"}\n{\"explanation\":\"Use '#' to correctly reference the last element in a JSON array with json_extract.\"}"}}
{"item":{"input":"SELECT season, json_object('sport', 'food', 'art') FROM leisure","answer":"SELECT season, json_object('sport', sport, 'food', food, 'art', art) FROM leisure","gemini_output":"{\"hint\":\"json_object('sport', sport, 'food'\"}\n{\"explanation\":\"Remember, JSON_OBJECT takes key-value pairs. Each key needs a corresponding value.\"}"}}
{"item":{"input":"SELECT * FROM zoo_animal","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"SELECT north_zone.squaremeter/count(*)\",\"explanation\":\"You're on the right track! Start by selecting the necessary columns and performing calculations.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter\"}\n{\"explanation\":\"You're on the right track! Don't forget to complete your subquery after selecting the 'zone'.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone\"}\n{\"explanation\":\"Remember to complete your subquery with a FROM clause and its conditions.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter\",\"explanation\":\"The subquery needs to be completed and joined with other tables.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"...GROUP BY zone) north_zone...\"}\n{\"explanation\":\"Remember to close your subquery with a closing parenthesis and then alias it.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"INNER JOIN zoo_cage c ON (north_zone.zone = c.zone)\"}\n{\"explanation\":\"You're on the right track! After INNER, you need to specify what you're joining.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"ON (north_zone.zone = c.zone)\"}\n{\"explanation\":\"Make sure your JOIN condition correctly links the tables based on common columns.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"...INNER JOIN zoo_animal a...\"}\n{\"explanation\":\"Remember to join all necessary tables for the query to be complete.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON ","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"a.cage_id) GROUP BY c.\"}\n{\"explanation\":\"You're close! Remember to include the correct column for grouping after the JOIN conditions.\"}"}}
{"item":{"input":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY","answer":"SELECT north_zone.squaremeter/count(*) FROM (SELECT zone, sum(squaremeter) squaremeter FROM zoo_cage WHERE zone = 'north' GROUP BY zone) north_zone INNER JOIN zoo_cage c ON (north_zone.zone = c.zone) INNER JOIN zoo_animal a ON (c.id = a.cage_id) GROUP BY c.zone, north_zone.squaremeter","gemini_output":"{\"hint\":\"...GROUP BY c.zone, north_zone.squaremeter...\"}\n{\"explanation\":\"When using GROUP BY, all non-aggregated columns in SELECT must be included.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT name from ghosts where year > 1800","gemini_output":"{\"hint\":\"SELECT name \"}{\"explanation\":\"Start by selecting the columns you want to see, such as 'name'.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT * FROM Ghosts WHERE YEAR BETWEEN 1600 AND 1700 ORDER BY YEAR DESC, NAME ASC","gemini_output":"{\"hint\":\"SELECT * FROM\"}\n{\"explanation\":\"In SQL, 'SELECT *' is used to select all columns from a table.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT COUNT(DISTINCT YEAR) FROM GHOSTS","gemini_output":"{\"hint\":\"SELECT COUNT(\"}\n{\"explanation\":\"You're on the right track! After SELECT, you often specify what you want to count or retrieve.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT name from ghosts order by name ASC","gemini_output":"{\"hint\":\"SELECT name \"}{\"explanation\":\"After SELECT, specify the column(s) you want to retrieve from the table.\"}"}}
{"item":{"input":"SELECT","answer":"SELECT SUM(MURDERED) FROM GHOSTS WHERE NAME = 'Siegfried'","gemini_output":"{\"hint\":\"SELECT SUM(MURDE\"}\n{\"explanation\":\"You're off to a good start! After SELECT, you'll often specify a function or column.\"}"}}
{"item":{"input":"SELECT year FROM GHOSTS WHERE name IS \"Sieglinde\"","answer":"SELECT year from ghosts where name =\"Sieglinde\"","gemini_output":"{\"hint\":\"WHERE name =\",\"explanation\":\"Use the assignment operator (=) to compare a column to a string.\"}"}}
{"item":{"input":"SELECT a.title, count(*), sum(s.seconds) FROM song s LEFT JOIN album a ON a.album_id = s.album_fk GROUP BY s.title","answer":"SELECT a.title, count(*), sum(s.seconds) FROM song s INNER JOIN album a ON a.album_id = s.album_fk GROUP BY a.title","gemini_output":"{\"hint\":\"FROM song s INNER JOIN album a ON a.album_id = s.album_fk\"}\n{\"explanation\":\"Consider which JOIN type is most appropriate when you want to combine related rows from two tables.\"}"}}
{"item":{"input":"SELECT COUNT(type1) FROM Pokemon;","answer":"SELECT COUNT(*) FROM Pokedex_new;","gemini_output":"{\"hint\":\"SELECT COUNT(*) FROM Pokedex_new; \"}{\"explanation\":\"Consider counting all rows instead of a specific column. \"}"}}
{"item":{"input":"SELECT a.name, a.type FROM zoo_employee k JOIN zoo_animal a ON c.cage_id JOIN zoo_food f ON  f.id = a.food_id WHERE a.name='blueberry' AND k.firstname = 'Heidi' ","answer":"SELECT a.name, a.type FROM zoo_employee k JOIN zoo_animal a ON k.cage_id = a.cage_id JOIN zoo_food f ON f.id = a.food_id WHERE f.name='blueberry' AND k.firstname = 'Heidi';","gemini_output":"{\"hint\":\"...a ON k.cage_id = a.cage_id JOIN...\"}\n{\"explanation\":\"Remember to specify the join condition for your JOIN clauses.\"}"}}
{"item":{"input":"SELECT p.personid, p.firstname, p.lastname FROM person p INNER JOIN person ar ON (p.personid = ar.personid_fk) INNER JOIN area a ON (ar.areaid_fk = a.areaid) WHERE a.areaname = 'Mechanical Lab' ORDER BY lastname, firstname;","answer":"SELECT p.personid, p.firstname, p.lastname FROM person p INNER JOIN accessright ar ON (p.personid = ar.personid_fk) INNER JOIN area a ON (ar.areaid_fk = a.areaid) WHERE a.areaname = 'Mechanical Lab' ORDER BY lastname, firstname;","gemini_output":"{\"hint\":\"...JOIN accessright ar...\"}\n{\"explanation\":\"Double check the table you are joining for 'ar'. Is 'person' the correct table alias?\"}"}}
